---
# yamllint disable rule:line-length
###############################################################################
# Github Prep
###############################################################################
# Prep github environment for release download management.
#
# API Endpoints:
# * https://api.github.com/repos/{USER}/{REPO}/releases/latest
# * https://api.github.com/repos/{USER}/{REPO}/releases/tags/{VERSION}
# Access tokens must have 'contents:read' permissions.
#
# Install Methodology:
# * If testing, extract sourced testing archive, set variables and exit.
# * Determine version or 'latest' version to use.
# * Install dependencies for downloading.
# * Download to staging directory.
# * Extract archive to target location.
# * Set target permissions.
# * Cleanup staged file if enabled.
#
# Generates:
#   _github_staging_stat: stat - For existing staging location.
#   _github_extract_stat: stat - For existing extract location.
#   _github_archive_stat: stat - For existing archive location.
#   _github_cache_test_index: int - Current injected test archive item.
#
# Exports:
#   _github_target: str - Full version (vx.x.x) to install.
#   _github_target_url: str - Download url for target release.
#   _github_archive: str - Local versioned archive location.
#   _github_dir: str - Local versioned target location.
#   _github_remote_metadata: dict - Release metadata for requested version.
#   _github_extract: bool - True if new archive extracted/installed.

#
# Reference:
# * https://docs.github.com/en/rest/releases

- name: 'Prep | assert binary URL'
  when: github_binary_enable
  ansible.builtin.assert:
    quiet: true
    that:
      - github_binary_url | length > 0 or github_binary_static_url | length > 0
    fail_msg: >
      github_binary_url or github_binary_static_url must be set if
      github_binary_enable=true.

- name: 'Prep | WARNING'
  when: github_binary_static_url | length > 0
  ansible.builtin.debug:
    msg: |
      WARNING: DOWNLOAD CANNOT BE VERIFIED.

      Static URLs should ONLY be used for repositories without versioning which
      release compiled binaries from a separate URL. These downloads can
      contain malicious code and should be UNTRUSTED by default.

      {{ github_binary_static_url }}

- name: 'Prep | build release queries'
  ansible.builtin.set_fact:
    _github_base_url: '{{ github_role_release_url_base }}/{{ github_repo_owner }}/{{ github_repo_repo }}/releases'
    _github_release_path: '/{{ "tags/" if github_repo_release != "latest" }}{{ github_repo_release }}'

- name: 'Prep | get release metadata'
  when: >
    not (github_testing_enable | default(false)) and
    github_binary_static_url | length == 0
  ansible.builtin.uri:
    url: '{{ _github_base_url }}{{ "" if github_repo_pre_release_enable else _github_release_path }}'
    return_content: true
    headers:
      Authorization: '{{ github_personal_access_token | default(omit) }}'
  register: _github_remote_metadata

# Set before testing for injection. Normal binary URL generate own metadata.
- name: 'Prep | static URL download'
  when: github_binary_static_url | length > 0
  ansible.builtin.set_fact:
    _github_remote_metadata: {"json": {"tag_name": "{{ now(utc=true, fmt='%Y-%m-%d') }}", "tarball_url": "{{ github_binary_static_url }}", "zipball_url": "{{ github_binary_static_url }}"}}

- name: 'Prep | testing'
  when: (github_testing_enable | default(false))
  block:
    - name: 'Prep | testing | cache data'
      ansible.builtin.set_fact:
        _github_cache_test_index: '{{ 0 if not _github_cache_test_index is defined else _github_cache_test_index | int + 1 }}'

    - name: 'Prep | testing | inject get release metadata'
      ansible.builtin.set_fact:
        _github_remote_metadata: '{{
          {"json": {"tag_name": "{{ github_testing_versions[_github_cache_test_index | int ] }}", "tarball_url": "http://example.com/tar", "zipball_url": "http://example.com/zip"}}
          if not github_repo_pre_release_enable else
          {"json": [{"tag_name": "{{ github_testing_versions[_github_cache_test_index | int ] }}", "tarball_url": "http://example.com/pre_tar", "zipball_url": "http://example.com/pre_zip"}]}
          }}'

- name: 'Prep | sanitize release metadata'
  ansible.builtin.set_fact:
    _github_json: '{{ _github_remote_metadata.json[0] if github_repo_pre_release_enable else _github_remote_metadata.json }}'

- name: 'Prep | parse release metadata'
  ansible.builtin.set_fact:
    _github_target: '{{ _github_json.tag_name }}'
    _github_target_url: '{{ _github_json.zipball_url if github_repo_archive_type.startswith("zip") else _github_json.tarball_url }}'

- name: 'Prep | binary download'
  when: github_binary_enable and github_binary_static_url | length == 0
  block:
    - name: 'Prep | binary download | split version on specifier'
      ansible.builtin.set_fact:
        _github_target_bare: '{{ _github_target if github_binary_specifier == "" else _github_target.split(github_binary_specifier)[1:] | join(github_binary_specifier) }}'

    - name: 'Prep | binary download | parse binary path'
      ansible.builtin.set_fact:
        _github_binary_path: '{{ github_binary_url | regex_replace("{VERSION}", _github_target) | regex_replace("{BARE_VERSION}", _github_target_bare) }}'

    - name: 'Prep | binary download | set target URL'
      ansible.builtin.set_fact:
        _github_target_url: 'https://github.com/{{ github_repo_owner }}/{{ github_repo_repo }}/releases/download/{{ _github_binary_path | default(_github_target_url) }}'

- name: 'Prep | generate locations'
  ansible.builtin.set_fact:
    _github_archive: '{{ github_staging_dir }}/{{ github_repo_repo }}-{{ _github_target }}.{{ github_repo_archive_type }}'
    _github_dir: '{{ github_extract_dest }}/{{ github_repo_repo }}-{{ _github_target }}'

- name: 'Prep | force overwrite enabled'
  when: github_force_overwrite
  block:
    - name: 'Prep | remove cached downloaded archive'
      ansible.builtin.file:
        path: '{{ _github_archive }}'
        state: 'absent'

    - name: 'Prep | remove cached extracted release'
      ansible.builtin.file:
        path: '{{ _github_dir }}'
        state: 'absent'

- name: 'Prep | check archive location'
  ansible.builtin.stat:
    path: '{{ _github_archive }}'
  register: _github_archive_stat

- name: 'Prep | check staging directory'
  ansible.builtin.stat:
    path: '{{ github_staging_dir }}'
  register: _github_staging_stat

- name: 'Prep | check extract directory'
  ansible.builtin.stat:
    path: '{{ _github_dir }}'
  register: _github_extract_stat

- name: 'Prep | set change state'
  ansible.builtin.set_fact:
    _github_changed: '{{ not _github_extract_stat.stat.exists }}'
